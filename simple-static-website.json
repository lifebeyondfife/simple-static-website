{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CloudFront distribution with S3 origin for static website hosting (Updated 2025)",
  "Parameters": {
    "WebsiteName": {
      "Type": "String",
      "Description": "E.g. the \"www\" in www.example.com"
    },
    "BucketName": {
      "Type": "String",
      "Default": "",
      "Description": "If not supplied, a bucket will be created and named after the stack"
    },
    "DomainName": {
      "Type": "String",
      "Description": "E.g. \"example.com\" in www.example.com"
    },
    "HostedZoneId": {
      "Type": "AWS::Route53::HostedZone::Id",
      "Description": "You must already have a Hosted Zone setup for your domain in Route53."
    },
    "PriceClass": {
      "Type": "String",
      "Default": "PriceClass_100",
      "AllowedValues": [
        "PriceClass_100",
        "PriceClass_200",
        "PriceClass_All"
      ],
      "Description": "CloudFront price class: PriceClass_100 (US, Canada, Europe), PriceClass_200 (+ Asia, Africa), PriceClass_All (+ South America, Australia)"
    },
    "EnableLogging": {
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Description": "Enable CloudFront access logging"
    },
    "CacheControlMaxAge": {
      "Type": "Number",
      "Default": 86400,
      "Description": "Default cache duration in seconds (86400 = 1 day)"
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "DNS Configuration"
          },
          "Parameters": [
            "HostedZoneId",
            "WebsiteName",
            "DomainName"
          ]
        },
        {
          "Label": {
            "default": "S3 Configuration"
          },
          "Parameters": [
            "BucketName"
          ]
        },
        {
          "Label": {
            "default": "CloudFront Configuration"
          },
          "Parameters": [
            "PriceClass",
            "EnableLogging",
            "CacheControlMaxAge"
          ]
        }
      ],
      "ParameterLabels": {
        "BucketName": {
          "default": "Existing S3 Bucket Name"
        },
        "DomainName": {
          "default": "Domain Name"
        },
        "WebsiteName": {
          "default": "Website Name"
        },
        "HostedZoneId": {
          "default": "Hosted Zone Id"
        },
        "PriceClass": {
          "default": "CloudFront Price Class"
        },
        "EnableLogging": {
          "default": "Enable CloudFront Logging"
        },
        "CacheControlMaxAge": {
          "default": "Default Cache Duration (seconds)"
        }
      }
    }
  },
  "Conditions": {
    "BucketNameEmpty": {
      "Fn::Equals": [
        {
          "Ref": "BucketName"
        },
        ""
      ]
    },
    "EnableAccessLogs": {
      "Fn::Equals": [
        {
          "Ref": "EnableLogging"
        },
        "true"
      ]
    }
  },
  "Resources": {
    "Certificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "DomainName": {
          "Fn::Sub": "${WebsiteName}.${DomainName}"
        },
        "DomainValidationOptions": [
          {
            "DomainName": {
              "Fn::Sub": "${WebsiteName}.${DomainName}"
            },
            "HostedZoneId": {
              "Ref": "HostedZoneId"
            }
          }
        ],
        "ValidationMethod": "DNS"
      }
    },
    "CloudFrontOriginAccessControl": {
      "Type": "AWS::CloudFront::OriginAccessControl",
      "Properties": {
        "OriginAccessControlConfig": {
          "Name": {
            "Fn::Sub": "${AWS::StackName}-OAC"
          },
          "OriginAccessControlOriginType": "s3",
          "SigningBehavior": "always",
          "SigningProtocol": "sigv4"
        }
      }
    },
    "LoggingBucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "EnableAccessLogs",
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "DeleteLogsAfter90Days",
              "Status": "Enabled",
              "ExpirationInDays": 90
            }
          ]
        }
      }
    },
    "HTML": {
      "Type": "AWS::S3::Bucket",
      "Condition": "BucketNameEmpty",
      "Properties": {
        "BucketName": {
          "Fn::Sub": "${WebsiteName}.${DomainName}"
        },
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      },
      "DeletionPolicy": "Retain",
      "UpdateReplacePolicy": "Retain"
    },
    "ARecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "HostedZoneId": "Z2FDTNDATAQYW2",
          "DNSName": {
            "Fn::GetAtt": [
              "DistributionCloudFrontNet",
              "DomainName"
            ]
          }
        },
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Fn::Sub": "${WebsiteName}.${DomainName}"
        },
        "Type": "A"
      }
    },
    "AAAARecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "HostedZoneId": "Z2FDTNDATAQYW2",
          "DNSName": {
            "Fn::GetAtt": [
              "DistributionCloudFrontNet",
              "DomainName"
            ]
          }
        },
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Fn::Sub": "${WebsiteName}.${DomainName}"
        },
        "Type": "AAAA"
      }
    },
    "ResponseHeadersPolicy": {
      "Type": "AWS::CloudFront::ResponseHeadersPolicy",
      "Properties": {
        "ResponseHeadersPolicyConfig": {
          "Name": {
            "Fn::Sub": "${AWS::StackName}-SecurityHeadersPolicy"
          },
          "SecurityHeadersConfig": {
            "ContentSecurityPolicy": {
              "ContentSecurityPolicy": "default-src 'self'; script-src 'self' https://cdnjs.cloudflare.com 'unsafe-inline'; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; font-src 'self' https://fonts.gstatic.com; img-src 'self' data:; connect-src 'self'; frame-ancestors 'none';",
              "Override": true
            },
            "ContentTypeOptions": {
              "Override": true
            },
            "FrameOptions": {
              "FrameOption": "DENY",
              "Override": true
            },
            "ReferrerPolicy": {
              "ReferrerPolicy": "strict-origin-when-cross-origin",
              "Override": true
            },
            "StrictTransportSecurity": {
              "AccessControlMaxAgeSec": 31536000,
              "IncludeSubdomains": true,
              "Preload": true,
              "Override": true
            },
            "XSSProtection": {
              "ModeBlock": true,
              "Protection": true,
              "Override": true
            }
          },
          "CustomHeadersConfig": {
            "Items": [
              {
                "Header": "Permissions-Policy",
                "Value": "camera=(), geolocation=(), microphone=()",
                "Override": true
              }
            ]
          }
        }
      }
    },
    "CachePolicy": {
      "Type": "AWS::CloudFront::CachePolicy",
      "Properties": {
        "CachePolicyConfig": {
          "Name": {
            "Fn::Sub": "${AWS::StackName}-CachePolicy"
          },
          "DefaultTTL": {
            "Ref": "CacheControlMaxAge"
          },
          "MaxTTL": {
            "Fn::Multiply": [
              {
                "Ref": "CacheControlMaxAge"
              },
              7
            ]
          },
          "MinTTL": 0,
          "ParametersInCacheKeyAndForwardedToOrigin": {
            "CookiesConfig": {
              "CookieBehavior": "none"
            },
            "HeadersConfig": {
              "HeaderBehavior": "none"
            },
            "QueryStringsConfig": {
              "QueryStringBehavior": "all"
            },
            "EnableAcceptEncodingGzip": true,
            "EnableAcceptEncodingBrotli": true
          }
        }
      }
    },
    "DistributionCloudFrontNet": {
      "Type": "AWS::CloudFront::Distribution",
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            {
              "Fn::Sub": "${WebsiteName}.${DomainName}"
            }
          ],
          "Comment": {
            "Fn::Sub": "CloudFront distribution for ${WebsiteName}.${DomainName}"
          },
          "Enabled": true,
          "HttpVersion": "http2and3",
          "IPV6Enabled": true,
          "PriceClass": {
            "Ref": "PriceClass"
          },
          "DefaultRootObject": "index.html",
          "CustomErrorResponses": [
            {
              "ErrorCode": 404,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html"
            },
            {
              "ErrorCode": 403,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html"
            }
          ],
          "Logging": {
            "Fn::If": [
              "EnableAccessLogs",
              {
                "Bucket": {
                  "Fn::GetAtt": [
                    "LoggingBucket",
                    "DomainName"
                  ]
                },
                "IncludeCookies": false,
                "Prefix": "cf-logs/"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "DefaultCacheBehavior": {
            "TargetOriginId": {
              "Fn::If": [
                "BucketNameEmpty",
                {
                  "Fn::Sub": "S3-origin-${HTML}"
                },
                {
                  "Fn::Sub": "S3-origin-${BucketName}"
                }
              ]
            },
            "ViewerProtocolPolicy": "redirect-to-https",
            "CachePolicyId": {
              "Ref": "CachePolicy"
            },
            "ResponseHeadersPolicyId": {
              "Ref": "ResponseHeadersPolicy"
            },
            "AllowedMethods": [
              "GET",
              "HEAD",
              "OPTIONS"
            ],
            "CachedMethods": [
              "GET",
              "HEAD",
              "OPTIONS"
            ],
            "Compress": true
          },
          "Origins": [
            {
              "DomainName": {
                "Fn::If": [
                  "BucketNameEmpty",
                  {
                    "Fn::GetAtt": [
                      "HTML",
                      "RegionalDomainName"
                    ]
                  },
                  {
                    "Fn::Sub": "${BucketName}.s3.${AWS::Region}.amazonaws.com"
                  }
                ]
              },
              "Id": {
                "Fn::If": [
                  "BucketNameEmpty",
                  {
                    "Fn::Sub": "S3-origin-${HTML}"
                  },
                  {
                    "Fn::Sub": "S3-origin-${BucketName}"
                  }
                ]
              },
              "S3OriginConfig": {
                "OriginAccessIdentity": ""
              },
              "OriginAccessControlId": {
                "Ref": "CloudFrontOriginAccessControl"
              }
            }
          ],
          "Restrictions": {
            "GeoRestriction": {
              "RestrictionType": "none",
              "Locations": []
            }
          },
          "ViewerCertificate": {
            "SslSupportMethod": "sni-only",
            "MinimumProtocolVersion": "TLSv1.2_2021",
            "AcmCertificateArn": {
              "Ref": "Certificate"
            }
          }
        }
      }
    },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Fn::If": [
            "BucketNameEmpty",
            {
              "Ref": "HTML"
            },
            {
              "Ref": "BucketName"
            }
          ]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudfront.amazonaws.com"
              },
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::If": [
                  "BucketNameEmpty",
                  {
                    "Fn::Sub": "arn:aws:s3:::${HTML}/*"
                  },
                  {
                    "Fn::Sub": "arn:aws:s3:::${BucketName}/*"
                  }
                ]
              },
              "Condition": {
                "StringEquals": {
                  "AWS:SourceArn": {
                    "Fn::Sub": "arn:aws:cloudfront::${AWS::AccountId}:distribution/${DistributionCloudFrontNet}"
                  }
                }
              }
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "WebsiteURL": {
      "Value": {
        "Fn::Sub": "https://${WebsiteName}.${DomainName}"
      },
      "Description": "Website URL"
    },
    "CloudFrontURL": {
      "Value": {
        "Fn::GetAtt": [
          "DistributionCloudFrontNet",
          "DomainName"
        ]
      },
      "Description": "CloudFront domain name"
    },
    "S3BucketName": {
      "Value": {
        "Fn::If": [
          "BucketNameEmpty",
          {
            "Ref": "HTML"
          },
          {
            "Ref": "BucketName"
          }
        ]
      },
      "Description": "S3 bucket hosting the website content"
    },
    "S3BucketArn": {
      "Value": {
        "Fn::If": [
          "BucketNameEmpty",
          {
            "Fn::GetAtt": [
              "HTML",
              "Arn"
            ]
          },
          {
            "Fn::Sub": "arn:aws:s3:::${BucketName}"
          }
        ]
      },
      "Description": "S3 bucket ARN"
    },
    "UploadCommand": {
      "Value": {
        "Fn::If": [
          "BucketNameEmpty",
          {
            "Fn::Sub": "aws s3 sync ./dist s3://${HTML} --delete"
          },
          {
            "Fn::Sub": "aws s3 sync ./dist s3://${BucketName} --delete"
          }
        ]
      },
      "Description": "Command to upload website files (assuming they're in the ./dist directory)"
    },
    "InvalidationCommand": {
      "Value": {
        "Fn::Sub": "aws cloudfront create-invalidation --distribution-id ${DistributionCloudFrontNet} --paths \"/*\""
      },
      "Description": "Command to invalidate CloudFront cache after deployment"
    }
  }
}